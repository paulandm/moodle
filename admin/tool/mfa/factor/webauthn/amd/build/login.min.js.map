{"version":3,"file":"login.min.js","sources":["../src/login.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * For collecting WebAuthn authenticator details on login\n *\n * @module     factor_webauthn/login\n * @copyright  Catalyst IT\n * @author     Alex Morris <alex.morris@catalyst.net.nz>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as utils from './utils';\n\nconst getAttestationResponse = (cred) => {\n    const response = {\n        id: cred?.rawId,\n        clientDataJSON: cred.response?.clientDataJSON,\n        authenticatorData: cred.response?.authenticatorData,\n        signature: cred.response?.signature,\n        userHandle: cred.response?.userHandle,\n    };\n\n    Object.entries(response).forEach(([key, value]) => {\n        if (value) {\n            response[key] = utils.arrayBufferToBase64(value);\n        }\n    });\n\n    return response;\n};\n\nexport const init = (initialArgs) => {\n    document.addEventListener('click', async(e) => {\n        if (!e.target.closest('#id_submitbutton')) {\n            return;\n        }\n\n        if (!navigator.credentials || !navigator.credentials.create) {\n            throw new Error('This browser does not support webauthn.');\n        }\n\n        const getArgs = JSON.parse(initialArgs);\n        if (getArgs.success === false) {\n            throw new Error(getArgs.msg || 'unknown error occured');\n        }\n\n        e.preventDefault();\n\n        utils.recursiveBase64StrToArrayBuffer(getArgs);\n\n        const cred = await navigator.credentials.get(getArgs);\n        const authenticatorAttestationResponse = getAttestationResponse(cred);\n\n        document.getElementById('id_response_input').value = JSON.stringify(authenticatorAttestationResponse);\n        document.getElementById('id_response_input').form.submit();\n    });\n};\n"],"names":["initialArgs","document","addEventListener","async","e","target","closest","navigator","credentials","create","Error","getArgs","JSON","parse","success","msg","preventDefault","utils","recursiveBase64StrToArrayBuffer","authenticatorAttestationResponse","cred","response","id","rawId","clientDataJSON","_cred$response","authenticatorData","_cred$response2","signature","_cred$response3","userHandle","_cred$response4","Object","entries","forEach","_ref","key","value","arrayBufferToBase64","getAttestationResponse","get","getElementById","stringify","form","submit"],"mappings":";;;;;;;;2BA4CqBA,cACjBC,SAASC,iBAAiB,SAASC,MAAAA,QAC1BC,EAAEC,OAAOC,QAAQ,+BAIjBC,UAAUC,cAAgBD,UAAUC,YAAYC,aAC3C,IAAIC,MAAM,iDAGdC,QAAUC,KAAKC,MAAMb,iBACH,IAApBW,QAAQG,cACF,IAAIJ,MAAMC,QAAQI,KAAO,yBAGnCX,EAAEY,iBAEFC,MAAMC,gCAAgCP,eAGhCQ,iCAtCkBC,CAAAA,gFACtBC,SAAW,CACbC,GAAIF,MAAAA,YAAAA,KAAMG,MACVC,sCAAgBJ,KAAKC,0CAALI,eAAeD,eAC/BE,0CAAmBN,KAAKC,2CAALM,gBAAeD,kBAClCE,kCAAWR,KAAKC,2CAALQ,gBAAeD,UAC1BE,mCAAYV,KAAKC,2CAALU,gBAAeD,mBAG/BE,OAAOC,QAAQZ,UAAUa,SAAQC,WAAEC,IAAKC,YAChCA,QACAhB,SAASe,KAAOnB,MAAMqB,oBAAoBD,WAI3ChB,UAuBsCkB,OADtBhC,UAAUC,YAAYgC,IAAI7B,UAG7CV,SAASwC,eAAe,qBAAqBJ,MAAQzB,KAAK8B,UAAUvB,kCACpElB,SAASwC,eAAe,qBAAqBE,KAAKC"}