{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * WebAuthn utility functions, for handling array buffers.\n *\n * @module     factor_webauthn/utils\n * @copyright  Catalyst IT\n * @author     Alex Morris <alex.morris@catalyst.net.nz>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst prefix = '=?BINARY?B?';\nconst suffix = '?=';\n\nexport const recursiveBase64StrToArrayBuffer = (obj) => {\n    if (typeof obj !== 'object') {\n        return;\n    }\n    for (let key in obj) {\n        if (typeof obj[key] === 'string') {\n            let str = obj[key];\n            if (str.substring(0, prefix.length) === prefix && str.substring(str.length - suffix.length) === suffix) {\n                str = str.substring(prefix.length, str.length - suffix.length);\n\n                const binaryString = window.atob(str);\n                const len = binaryString.length;\n                const bytes = new Uint8Array(len);\n                for (let i = 0; i < len; i++) {\n                    bytes[i] = binaryString.charCodeAt(i);\n                }\n                obj[key] = bytes.buffer;\n            }\n        } else {\n            recursiveBase64StrToArrayBuffer(obj[key]);\n        }\n    }\n};\n\nexport const arrayBufferToBase64 = (buffer) => {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n    for (let i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n};\n"],"names":["recursiveBase64StrToArrayBuffer","obj","key","str","substring","length","binaryString","window","atob","len","bytes","Uint8Array","i","charCodeAt","buffer","binary","byteLength","String","fromCharCode","btoa"],"mappings":";;;;;;;;;MA2BaA,gCAAmCC,SACzB,iBAARA,QAGN,IAAIC,OAAOD,OACY,iBAAbA,IAAIC,KAAmB,KAC1BC,IAAMF,IAAIC,QATX,gBAUCC,IAAIC,UAAU,EAVf,cAUyBC,SATzB,OAS+CF,IAAIC,UAAUD,IAAIE,OATjE,KASiFA,QAAoB,CACpGF,IAAMA,IAAIC,UAXX,cAW4BC,OAAQF,IAAIE,OAVxC,KAUwDA,cAEjDC,aAAeC,OAAOC,KAAKL,KAC3BM,IAAMH,aAAaD,OACnBK,MAAQ,IAAIC,WAAWF,SACxB,IAAIG,EAAI,EAAGA,EAAIH,IAAKG,IACrBF,MAAME,GAAKN,aAAaO,WAAWD,GAEvCX,IAAIC,KAAOQ,MAAMI,aAGrBd,gCAAgCC,IAAIC,6GAKZY,aAC5BC,OAAS,SACPL,MAAQ,IAAIC,WAAWG,QACvBL,IAAMC,MAAMM,eACb,IAAIJ,EAAI,EAAGA,EAAIH,IAAKG,IACrBG,QAAUE,OAAOC,aAAaR,MAAME,WAEjCL,OAAOY,KAAKJ"}